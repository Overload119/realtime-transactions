# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `aggregate_root` gem.
# Please instead update this file by running `bin/tapioca gem aggregate_root`.

# source://aggregate_root//lib/aggregate_root/version.rb#3
module AggregateRoot
  include ::AggregateRoot::AggregateMethods

  mixes_in_class_methods ::AggregateRoot::OnDSL
  mixes_in_class_methods ::AggregateRoot::Constructor

  class << self
    # Returns the value of attribute configuration.
    #
    # source://aggregate_root//lib/aggregate_root/configuration.rb#5
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://aggregate_root//lib/aggregate_root/configuration.rb#5
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://aggregate_root//lib/aggregate_root/configuration.rb#8
    def configure; end

    # @private
    #
    # source://aggregate_root//lib/aggregate_root.rb#86
    def included(host_class); end

    # source://aggregate_root//lib/aggregate_root.rb#64
    def with_default_apply_strategy; end

    # source://aggregate_root//lib/aggregate_root.rb#73
    def with_strategy(strategy); end
  end
end

# source://aggregate_root//lib/aggregate_root.rb#42
module AggregateRoot::AggregateMethods
  # source://aggregate_root//lib/aggregate_root.rb#43
  def apply(*events); end

  # source://aggregate_root//lib/aggregate_root.rb#59
  def unpublished_events; end

  # source://aggregate_root//lib/aggregate_root.rb#50
  def version; end

  # source://aggregate_root//lib/aggregate_root.rb#54
  def version=(value); end
end

# source://aggregate_root//lib/aggregate_root/configuration.rb#13
class AggregateRoot::Configuration
  # Returns the value of attribute default_event_store.
  #
  # source://aggregate_root//lib/aggregate_root/configuration.rb#14
  def default_event_store; end

  # Sets the attribute default_event_store
  #
  # @param value the value to set the attribute default_event_store to.
  #
  # source://aggregate_root//lib/aggregate_root/configuration.rb#14
  def default_event_store=(_arg0); end
end

# source://aggregate_root//lib/aggregate_root.rb#33
module AggregateRoot::Constructor
  # source://aggregate_root//lib/aggregate_root.rb#34
  def new(*_arg0, **_arg1); end
end

# source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#6
class AggregateRoot::DefaultApplyStrategy
  # @return [DefaultApplyStrategy] a new instance of DefaultApplyStrategy
  #
  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#7
  def initialize(strict: T.unsafe(nil)); end

  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#11
  def call(aggregate, event); end

  private

  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#30
  def apply_handler_name(event_type); end

  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#34
  def event_type(event_type); end

  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#22
  def handler_name(aggregate, event); end

  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#26
  def on_dsl_handler_name(aggregate, event_type); end

  # Returns the value of attribute on_methods.
  #
  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#38
  def on_methods; end

  # Returns the value of attribute strict.
  #
  # source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#38
  def strict; end
end

# source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#4
class AggregateRoot::InstrumentedRepository
  # @return [InstrumentedRepository] a new instance of InstrumentedRepository
  #
  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#5
  def initialize(repository, instrumentation); end

  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#10
  def load(aggregate, stream_name); end

  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#31
  def method_missing(method_name, *arguments, **keyword_arguments, &block); end

  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#16
  def store(aggregate, stream_name); end

  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#26
  def with_aggregate(aggregate, stream_name, &block); end

  private

  # Returns the value of attribute instrumentation.
  #
  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#45
  def instrumentation; end

  # Returns the value of attribute repository.
  #
  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#45
  def repository; end

  # @return [Boolean]
  #
  # source://aggregate_root//lib/aggregate_root/instrumented_repository.rb#39
  def respond_to_missing?(method_name, _include_private); end
end

# source://aggregate_root//lib/aggregate_root/default_apply_strategy.rb#4
class AggregateRoot::MissingHandler < ::StandardError; end

# source://aggregate_root//lib/aggregate_root.rb#11
module AggregateRoot::OnDSL
  # source://aggregate_root//lib/aggregate_root.rb#14
  def on(*event_klasses, &block); end

  # source://aggregate_root//lib/aggregate_root.rb#27
  def on_methods; end
end

# source://aggregate_root//lib/aggregate_root.rb#12
AggregateRoot::OnDSL::ANONYMOUS_CLASS = T.let(T.unsafe(nil), String)

# source://aggregate_root//lib/aggregate_root/repository.rb#4
class AggregateRoot::Repository
  # @return [Repository] a new instance of Repository
  #
  # source://aggregate_root//lib/aggregate_root/repository.rb#5
  def initialize(event_store = T.unsafe(nil)); end

  # source://aggregate_root//lib/aggregate_root/repository.rb#9
  def load(aggregate, stream_name); end

  # source://aggregate_root//lib/aggregate_root/repository.rb#15
  def store(aggregate, stream_name); end

  # source://aggregate_root//lib/aggregate_root/repository.rb#24
  def with_aggregate(aggregate, stream_name, &block); end

  private

  # source://aggregate_root//lib/aggregate_root/repository.rb#33
  def default_event_store; end

  # Returns the value of attribute event_store.
  #
  # source://aggregate_root//lib/aggregate_root/repository.rb#31
  def event_store; end
end

# source://aggregate_root//lib/aggregate_root/transform.rb#4
class AggregateRoot::Transform
  class << self
    # source://aggregate_root//lib/aggregate_root/transform.rb#5
    def to_snake_case(name); end
  end
end

# source://aggregate_root//lib/aggregate_root/version.rb#4
AggregateRoot::VERSION = T.let(T.unsafe(nil), String)
